import type { FullAuditedEntityDto } from '@abp/ng.core';

export interface CreateUpdateJobplanHistoryDto {
  jobplanId: string;
  activeStatus: number;
  equipmentCode: string;
  equipmentName: string;
  vessel: string;
  jobTitle: string;
  jobDescription: string;
  calFrequency: string;
  runFrequency: string;
  frequencyType: string;
  department: string;
  priority: string;
  rank: string;
  assignedTo: string;
  lastDoneDate: string;
  nextDueDate: string;
  jobType: string;
  maintenanceType: string;
  jobStatus: number;
  jobPlanStatus: string;
  jobOrder: number;
  initialReading: number;
  lastReading: number;
  planHorizon: number;
  jobCompletedDate: string;
  reading: string;
  remark: string;
  status: string;
  dueRhs: number;
  universalJobCode: string;
  deleteStatus: number;
  tempread: number;
  interval: number;
  dueHrs: number;
  rhrFromLastMaintenance: number;
  presentRHr: number;
  hoursToGo: number;
  previousReading: number;
  nextDueHr: number;
  frequencyTypeSum: string;
  frequencyTypeSum1: string;
  nextDueDateAfterComp: string;
  takenOrNot: number;
  editedTime: string;
}

export interface JobplanHistoryDto extends FullAuditedEntityDto<string> {
  jobplanId: string;
  activeStatus: number;
  equipmentCode: string;
  equipmentName: string;
  vessel: string;
  jobTitle: string;
  jobDescription: string;
  calFrequency: string;
  runFrequency: string;
  frequencyType: string;
  department: string;
  priority: string;
  rank: string;
  assignedTo: string;
  lastDoneDate: string;
  nextDueDate: string;
  jobType: string;
  maintenanceType: string;
  jobStatus: number;
  jobPlanStatus: string;
  jobOrder: number;
  initialReading: number;
  lastReading: number;
  planHorizon: number;
  jobCompletedDate: string;
  reading: string;
  remark: string;
  status: string;
  dueRhs: number;
  universalJobCode: string;
  deleteStatus: number;
  tempread: number;
  interval: number;
  dueHrs: number;
  rhrFromLastMaintenance: number;
  presentRHr: number;
  hoursToGo: number;
  previousReading: number;
  nextDueHr: number;
  frequencyTypeSum: string;
  frequencyTypeSum1: string;
  nextDueDateAfterComp: string;
  takenOrNot: number;
  editedTime: string;
}
